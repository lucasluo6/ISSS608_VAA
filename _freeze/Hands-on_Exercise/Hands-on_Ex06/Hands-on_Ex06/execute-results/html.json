{
  "hash": "c2751fda58f410e145a45a934634ec15",
  "result": {
    "markdown": "---\ntitle: \"Hands-on_Ex06\"\nauthor: \"Lucas Luo\"\ndate: \"May 21 2025\"\ndate-modified: \"last-modified\"\n\nformat:\n  html:\n    code-tools: true          \n    code-fold: true          \n    toc: true\n    theme: lux\n\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\n---\n\n\n# **Visualising and Analysing Time-oriented Data**\n\n# **1 Introduction & Data Preparation**\n\n## **1.1 Loading packages**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales,\n               viridis,\n               lubridate,\n               ggthemes,\n               gridExtra,\n               readxl,\n               knitr,\n               data.table,\n               tidyverse,\n               CGPfunctions,  #for slopegraph\n               ggHoriPlot\n               )\n```\n:::\n\n\n## **1.2 Data Preparation**\n\n### **1.2.1 Attack dataset**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n:::\n:::\n\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n-   *tz* field stores time zone of the source IP address.\n\nStep 1: Deriving *weekday* and *hour of day* fields\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n```\n:::\n\n\nStep 2: Deriving the attacks tibble data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks_new <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nkable(head(attacks_new))\n```\n\n::: {.cell-output-display}\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n:::\n:::\n\n\n### **1.2.2 Air arrivals dataset**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\nkable(head(air))\n```\n\n::: {.cell-output-display}\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|\n:::\n:::\n\n\nCreating MM YY columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`),\n                    levels=1:12,\n                    labels=month.abb,\n                    ordered=TRUE)\nair$year <- year(ymd(air$`Month-Year`))\nkable(head(air))\n```\n\n::: {.cell-output-display}\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|month | year|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|:-----|----:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|Jan   | 2000|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|Feb   | 2000|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|Mar   | 2000|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|Apr   | 2000|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|May   | 2000|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|Jun   | 2000|\n:::\n:::\n\n\n### **1.2.3 Rice dataset**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n:::\n:::\n\n\n### **1.2.4 Retail price dataset**\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(`Date` = dmy(`Date`))\nkable(head(averp))\n```\n\n::: {.cell-output-display}\n|Date       |Consumer Items                 | Values|\n|:----------|:------------------------------|------:|\n|2014-01-01 |Wholemeal Bread (Per 400 Gram) |   2.05|\n|2014-02-01 |Wholemeal Bread (Per 400 Gram) |   2.05|\n|2014-03-01 |Wholemeal Bread (Per 400 Gram) |   2.04|\n|2014-04-01 |Wholemeal Bread (Per 400 Gram) |   2.04|\n|2014-05-01 |Wholemeal Bread (Per 400 Gram) |   2.05|\n|2014-06-01 |Wholemeal Bread (Per 400 Gram) |   2.05|\n:::\n:::\n\n\n# **2 Visualizations**\n\n## **2.1 Calendar Heatmap**\n\n### **2.1.1 Single Calendar Heatmap**\n\n::: panel-tabset\n### Without theme_tufte()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks_new %>%\n  count(wkday, hour) %>%\n  ungroup() %>%\n  na.omit()\n\nggplot(data = grouped,\n       aes(x = hour,\n           y = wkday,\n           fill = n)) + \n  geom_tile(color = \"white\",\n            size = 0.1) +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"sky blue\",\n                      high = \"dark blue\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### With theme_tufte()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks_new %>%\n  count(wkday, hour) %>%\n  ungroup() %>%\n  na.omit()\n\nggplot(data = grouped,\n       aes(x = hour,\n           y = wkday,\n           fill = n)) + \n  geom_tile(color = \"white\",\n            size = 0.1) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"sky blue\",\n                      high = \"dark blue\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n### **2.1.2 Multiple Calendar Heatmaps**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- attacks_new %>%\n  count(source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks_new %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(source_country, levels = top4)) %>%\n  na.omit()\n\nkable(head(top4_attacks))\n```\n\n::: {.cell-output-display}\n|source_country |wkday    |hour |   n|\n|:--------------|:--------|:----|---:|\n|CN             |Saturday |0    | 438|\n|CN             |Saturday |1    | 401|\n|CN             |Saturday |2    | 358|\n|CN             |Saturday |3    | 487|\n|CN             |Saturday |4    | 457|\n|CN             |Saturday |5    | 429|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = top4_attacks,\n       aes(x = hour,\n           y = wkday,\n           fill = n)) + \n  geom_tile(color = \"white\",\n            size = 0.1) +\n  facet_wrap(~source_country, ncol = 2) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"sky blue\",\n                      high = \"dark blue\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## **2.2 Cycle Plot**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_air <- air %>%\n  select(`Vietnam`,\n         month, \n         year) %>%\n  filter(year >= 2010)\n\nhline.data <- subset_air %>%\n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\nggplot() +\n  geom_line(data = subset_air,\n            aes(x = year,\n                y = `Vietnam`,\n                group = month),\n            colour = \"black\") +\n  geom_hline(aes(yintercept = avgvalue),\n             data = hline.data,\n             linetype = 6,\n             colour = \"red\",\n             size = 0.5) +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Vistor arrivals from Vietnam by air, Jan 2010 - Dec 2019\",\n       x = \"\",\n       y = \"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## **2.3 Slopegraph**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                  Title = \"Rice Yield of Top 11 Asian Countries\",\n                  SubTitle = \"1961 - 1980\",\n                  Caption = \"Modified\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## **2.4 Horizon Graph**\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp %>%\n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() + \n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle(\"Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 20222)\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}