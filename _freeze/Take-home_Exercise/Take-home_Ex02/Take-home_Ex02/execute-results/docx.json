{
  "hash": "f025cde708803bd07c9ef5b695df3b4a",
  "result": {
    "markdown": "---\ntitle: \"Take-home_Ex02\"\nauthor: \"Lucas Luo\"\ndate: \"May 21 2025\"\ndate-modified: \"last-modified\"\n\nformat: docx\neditor: visual\n\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\n---\n\n\n\n\n## üìÅ 1. Load Knowledge Graph Data\n\nThe dataset provided is a directed multigraph in JSON format. It contains information about people in the music industry, songs, albums, record labels, and the relationships between them such as performances, collaborations, and influences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read graph data\ngraph_data <- fromJSON(\"data/MC1_graph.json\")\n\n# Extract clean nodes and edges\nnodes_tbl <- graph_data$nodes %>% distinct(id, .keep_all = TRUE)\nedges_tbl <- graph_data$links\n\n# Recreate id-to-row-index mapping\nid_map <- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n# Rebuild edges_tbl to include row indices as from / to\nedges_tbl <- graph_data$links %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index) %>%\n  filter(!is.na(from), !is.na(to))\n\n# Build base tidygraph\ng <- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = graph_data$directed)\n```\n:::\n\n\n## üîç 1.1 Exploratory Data Analysis (EDA): Graph Overview\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Total number of nodes and edges\ntotal_nodes <- nrow(nodes_tbl)\ntotal_edges <- nrow(edges_tbl)\n\n# Unique node types\nnode_types <- nodes_tbl %>% count(`Node Type`, sort = TRUE)\n\n# Unique edge types\nedge_types <- edges_tbl %>% count(`Edge Type`, sort = TRUE)\n\nlist(\n  Total_Nodes = total_nodes,\n  Total_Edges = total_edges,\n  Node_Types = node_types,\n  Edge_Types = edge_types\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Total_Nodes\n[1] 17412\n\n$Total_Edges\n[1] 37857\n\n$Node_Types\n     Node Type     n\n1       Person 11361\n2         Song  3615\n3  RecordLabel  1217\n4        Album   996\n5 MusicalGroup   223\n\n$Edge_Types\n            Edge Type     n\n1         PerformerOf 13587\n2          RecordedBy  3798\n3          ComposerOf  3290\n4          ProducerOf  3209\n5       DistributedBy  3013\n6          LyricistOf  2985\n7           InStyleOf  2289\n8    InterpolatesFrom  1574\n9  LyricalReferenceTo  1496\n10            CoverOf  1429\n11    DirectlySamples   619\n12           MemberOf   568\n```\n:::\n:::\n\n\n## üß© Node Types Description\n\nBased on the data dictionary and actual values in the JSON file, we can classify the following node types:\n\n| Node Type      | Description                                                                 |\n|----------------------|-------------------------------------------------|\n| `Person`       | Any individual contributor, including singers, lyricists, composers, etc.   |\n| `MusicalGroup` | Groups formed by multiple individuals, e.g., bands or choirs                |\n| `Song`         | Individual song tracks with attributes like release date, genre, etc.       |\n| `Album`        | Grouped collections of songs, with their own release and popularity markers |\n| `RecordLabel`  | Organizations involved in production, recording, or distribution            |\n\nWe can also check their frequency in the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom palette inspired by genre styles\ngenre_palette <- c(\n  \"#A566FF\",  # Person (lavender)\n  \"#2ECC71\",  # Song (green)\n  \"#1C1C1E\",  # RecordLabel (black)\n  \"#FA7268\",  # Album (salmon)\n  \"#34B1C4\"   # MusicalGroup (aqua)\n)\n\nnode_types <- node_types %>% \n  mutate(text_color = ifelse(n > 1000, \"white\", \"black\"),\n         text_hjust = ifelse(n > 1000, 1.1, -0.1))\n\nggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +\n  geom_col(width = 0.65, show.legend = FALSE) +\n  geom_text(aes(label = n, hjust = text_hjust, color = text_color), \n            size = 4.5, fontface = \"bold\") +\n  coord_flip(clip = \"off\") +\n  scale_fill_manual(values = genre_palette) +\n  scale_color_identity() +\n  labs(\n    title = \"<b style='font-size:20pt;'>Node Type Distribution</b>\",\n    subtitle = \"<span style='color:#666666;'>Count of each node type in the knowledge graph</span>\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica Neue\") +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.y = element_text(face = \"bold\", size = 13, color = \"#222222\"),\n    axis.text.x = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_markdown(size = 20, face = \"bold\", hjust = 0),\n    plot.subtitle = element_markdown(size = 13, hjust = 0),\n    plot.margin = margin(10, 60, 30, 10)\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-docx/unnamed-chunk-3-1.png)\n:::\n:::\n\n\n## üîó Edge Types Reference Table\n\nBelow is the detailed explanation of all possible **Edge Types** in the knowledge graph, which describe different types of relationships between entities (nodes).\n\n### üéµ Creative and Collaboration Relationships\n\n| Edge Type     | Meaning                                   |\n|---------------|-------------------------------------------|\n| `PerformerOf` | A (person/group) performed B (song/album) |\n| `ComposerOf`  | A is the composer of B                    |\n| `LyricistOf`  | A is the lyricist of B                    |\n| `ProducerOf`  | A is the producer of B                    |\n\n### üè¢ Company Relationships\n\n| Edge Type       | Meaning                                      |\n|-----------------|----------------------------------------------|\n| `RecordedBy`    | A (work) was recorded by B (record label)    |\n| `DistributedBy` | A (work) was distributed by B (record label) |\n\n### üé® Style and Influence Relationships\n\n| Edge Type            | Meaning                          |\n|----------------------|----------------------------------|\n| `InStyleOf`          | A mimics the style of B          |\n| `CoverOf`            | A is a cover version of B        |\n| `InterpolatesFrom`   | A interpolates melody from B     |\n| `LyricalReferenceTo` | A makes a lyrical reference to B |\n| `DirectlySamples`    | A directly samples audio from B  |\n\n### üë• Membership Relationships\n\n| Edge Type  | Meaning                                          |\n|------------|--------------------------------------------------|\n| `MemberOf` | A is a member of B (a music group or collective) |\n\nTheir distribution is plotted below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_palette <- c(\"#CA5310\", \"#F5C518\", \"#E5989B\", \"#38B000\", \"#2D3142\", \"#06D6A0\", \"#83C5BE\",\n                  \"#F4A261\", \"#F6BD60\", \"#A9DEF9\", \"#CBAACB\", \"#9B5DE5\")\n\nedge_types <- edge_types %>% \n  mutate(text_color = ifelse(n > 2000, \"white\", \"black\"),\n         text_hjust = ifelse(n > 2000, 1.1, -0.1))\n\nggplot(edge_types, aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.65, show.legend = FALSE) +\n  geom_text(aes(label = n, hjust = text_hjust, color = text_color), \n            size = 4.5, fontface = \"bold\") +\n  coord_flip(clip = \"off\") +\n  scale_fill_manual(values = edge_palette) +\n  scale_color_identity() +\n  labs(\n    title = \"<b style='font-size:20pt;'>Edge Type Distribution</b>\",\n    subtitle = \"<span style='color:#666666;'>Types and frequency of relationships in the knowledge graph</span>\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica Neue\") +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.y = element_text(face = \"bold\", size = 13, color = \"#222222\"),\n    axis.text.x = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_markdown(size = 20, face = \"bold\", hjust = 0),\n    plot.subtitle = element_markdown(size = 13, hjust = 0),\n    plot.margin = margin(10, 60, 30, 10)\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\nThese insights provide a foundation to interpret future patterns in artist collaboration, influence, and success prediction.\n\n## üåç 2. Sailor Shift‚Äôs Ego Network Overview (Full Connected Subgraph)\n\n### üìå Objective\n\nThis section extracts and visualizes the **full connected subgraph** centered on *Sailor Shift*, showcasing all directly and indirectly connected entities in the knowledge graph.\n\n------------------------------------------------------------------------\n\n### üå≠Ô∏è Step 1: Extract All Connected Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get Sailor Shift's node id\nsailor_id <- nodes_tbl %>% \n  filter(name == \"Sailor Shift\") %>% \n  pull(id)\n\n# Convert tidygraph to igraph for component extraction\nig <- as.igraph(g)\n\n# Identify the connected component that includes Sailor Shift\ncomponent_id <- igraph::components(ig)$membership[which(V(ig)$id == sailor_id)]\nconnected_ids <- V(ig)[igraph::components(ig)$membership == component_id]$name\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### üåç Step 2: Visualize Static Subgraph with Interactive 3-Hop Network\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to igraph and compute 3-hop neighborhood\nig <- as.igraph(g)\nsailor_vid <- which(V(ig)$id == sailor_id)\nneighbor_ids <- ego(ig, order = 2, nodes = sailor_vid, mode = \"all\")[[1]]\n\nsub3_ids <- V(ig)[neighbor_ids]$id\nsub3_nodes_tbl <- nodes_tbl %>% filter(id %in% sub3_ids)\nsub3_edges_tbl <- edges_tbl %>% filter(source %in% sub3_ids & target %in% sub3_ids)\n\n# Prepare visNetwork data\n# Modify vis_nodes to make \"Sailor Shift\" larger and bold\nvis_nodes <- sub3_nodes_tbl %>%\n  mutate(size = ifelse(name == \"Sailor Shift\", 50, 20)) %>%  # üîç Control node size\n  transmute(\n    id = id,\n    label = name,\n    group = `Node Type`,\n    title = paste0(\"<b>\", name, \"</b><br>Type: \", `Node Type`),\n    value = size  # visNetwork uses 'value' to control node size\n  )\n\n# vis_edges remains unchanged\nvis_edges <- sub3_edges_tbl %>%\n  transmute(from = source, to = target, label = `Edge Type`, arrows = \"to\")\n\n# Render Interactive Graph with highlighted Sailor Shift\nvisNetwork(vis_nodes, vis_edges, width = \"100%\", height = \"700px\") %>%\n  visEdges(smooth = TRUE) %>%\n  visOptions(highlightNearest = list(enabled = TRUE, degree = 2), nodesIdSelection = TRUE) %>%\n  visLayout(randomSeed = 2025) %>%\n  visLegend(useGroups = TRUE, main = \"Node Type\") %>%\n  visPhysics(stabilization = TRUE)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nThis full subgraph gives a comprehensive view of Sailor Shift's artistic ecosystem, while the interactive 3-hop version allows users to explore relationships with greater clarity and responsiveness.\n\nüîç Insight: Sailor Shift‚Äôs Influence Ecosystem The Ego Network of Sailor Shift reveals a highly connected artistic ecosystem spanning songs, albums, musical groups, and record labels. Her position at the center of a dense subgraph highlights her role as a key figure in the Oceanus Folk community. The variety of edges (e.g., InterpolatesFrom, PerformerOf, MemberOf) suggests not only her creative versatility but also her multi-layered influence network‚Äîincluding direct artistic collaborations and indirect stylistic references.\n\nNotably:\n\nShe interacts with all five node types (Person, Song, Album, MusicalGroup, RecordLabel),\n\nHer connections include both creative influence (via stylistic or lyrical references) and professional affiliations (production, distribution, membership).\n\nThis network serves as a powerful visual entry point for investigating how and by whom Sailor Shift has been influenced, who she in turn has influenced, and what her broader role is within the Oceanus Folk genre.\n\nüöÄ Moving Forward: Task-based Subgraph Exploration With this foundation, we will now delve deeper into three core analytical tasks, each focused on a unique aspect of Sailor Shift‚Äôs artistic identity and influence. Each task will be accompanied by an interactive or static visualization powered by the knowledge graph.\n\n## ‚úÖ Task 1 ‚Äì Who Has Influenced Sailor Shift?\n\n### üéØ Objective:\n\nUse the knowledge graph to identify **who has influenced Sailor Shift over time**, by analyzing stylistic, lyrical, or sampling relationships represented in the graph. These insights will reveal patterns in her creative development.\n\n------------------------------------------------------------------------\n\n### üîç Why This Approach?\n\nSailor Shift‚Äôs musical evolution is shaped by direct and indirect artistic influences. In a knowledge graph, influence is captured by specific edge types:\n\n### üé® Style and Influence Relationships\n\n| Edge Type            | Meaning                          |\n|----------------------|----------------------------------|\n| `InStyleOf`          | A mimics the style of B          |\n| `CoverOf`            | A is a cover version of B        |\n| `InterpolatesFrom`   | A interpolates melody from B     |\n| `LyricalReferenceTo` | A makes a lyrical reference to B |\n| `DirectlySamples`    | A directly samples audio from B  |\n\nThese edge types describe different ways an artist or work may influence Sailor Shift. By filtering the graph for these edge types where **Sailor Shift is the target**, we construct a reliable picture of who influenced her and how.\n\n------------------------------------------------------------------------\n\nBy filtering the graph for these edge types targeting Sailor Shift, we can construct a reliable view of her artistic lineage.\n\n------------------------------------------------------------------------\n\n### üìå Step 1: Extract Influencer Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfluence_types <- c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"LyricalReferenceTo\", \"DirectlySamples\")\n\n# Get edges that influence her\ninfluencer_edges <- graph_data$links %>%\n  filter(`Edge Type` %in% influence_types, target == sailor_id) %>%\n  left_join(nodes_tbl, by = c(\"source\" = \"id\")) %>%\n  rename(influencer_name = name, influencer_type = `Node Type`) %>%\n  select(source, target, `Edge Type`, influencer_name, influencer_type)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### üìå Step 2: Visualize Influencer Type Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfluencer_edges %>%\n  count(`Edge Type`, influencer_type) %>%\n  ggplot(aes(x = reorder(`Edge Type`, n), y = n, fill = influencer_type)) +\n  geom_col(width = 0.7) +\n  coord_flip() +\n  labs(\n    title = \"Types of Influences on Sailor Shift\",\n    subtitle = \"By relationship and influencer type\",\n    x = NULL,\n    y = \"Count\"\n  ) +\n  theme_minimal(base_family = \"Helvetica Neue\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12),\n    axis.text.y = element_text(face = \"bold\"),\n    panel.grid.major.y = element_blank(),\n    axis.text.x = element_blank(),\n    legend.title = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-docx/unnamed-chunk-8-1.png)\n:::\n:::\n\n\nüîç Insight: Who Influenced Sailor Shift?\n\nThe bar chart reveals the distribution of influence types on Sailor Shift, broken down by the influencer's node type (`MusicalGroup` or `Person`). Key takeaways:\n\n-   **MusicalGroups are dominant** in all influence categories:\n    -   They account for **all** `InStyleOf` influences, suggesting that Sailor Shift's stylistic inspirations largely stem from band-level aesthetics.\n    -   For `DirectlySamples`, `MusicalGroup` nodes are again the exclusive contributors, highlighting a tendency to sample from established group-based soundscapes.\n-   **Persons contribute notably to lyrical and melodic references**:\n    -   Half of the `LyricalReferenceTo` and `InterpolatesFrom` edges are from `Person` nodes. This suggests a more personal or individual-driven source of lyrical and melodic inspiration, possibly tied to solo artist storytelling.\n\n------------------------------------------------------------------------\n\n### üìå Step 3: Visualize Knowledge Graph of Influencers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract relevant nodes\ninfluencer_ids <- influencer_edges$source\n\ninfluencer_nodes <- nodes_tbl %>%\n  filter(id %in% influencer_ids | id == sailor_id) %>%\n  distinct(id, .keep_all = TRUE)\n\ninfluencer_links <- graph_data$links %>%\n  filter(source %in% influencer_ids, target == sailor_id)\n\n# Map to row indices for subgraph\nid_map <- tibble(id = influencer_nodes$id, index = seq_len(nrow(influencer_nodes)))\n\ninfluencer_links_mapped <- influencer_links %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index) %>%\n  filter(!is.na(from), !is.na(to))\n\n# Create subgraph\ninfluencer_graph <- tbl_graph(nodes = influencer_nodes, edges = influencer_links_mapped, directed = TRUE)\n\n# Draw the graph\nset.seed(2025)\nggraph(influencer_graph, layout = \"kk\") +\n  geom_edge_link(\n    aes(color = `Edge Type`),\n    arrow = arrow(length = unit(4, 'mm')),\n    end_cap = circle(3, 'mm')\n  ) +\n  geom_node_point(aes(color = `Node Type`), size = 5) +\n  geom_node_text(\n    aes(label = name),  # ‚úÖ Show all node names\n    repel = TRUE,\n    size = 4,\n    fontface = ifelse(influencer_nodes$name == \"Sailor Shift\", \"bold\", \"plain\")\n  ) +\n  labs(\n    title = \"Who Influenced Sailor Shift?\",\n    subtitle = \"All nodes labeled in subgraph\"\n  ) +\n  theme_graph(base_family = \"Helvetica Neue\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-docx/unnamed-chunk-9-1.png)\n:::\n:::\n\n\n### üîç Step 3 Insight: Direct Artistic Influences on Sailor Shift\n\nThe static knowledge graph in Step 3 provides a clear snapshot of **who directly influenced Sailor Shift**, based on well-defined artistic relationships such as `DirectlySamples`, `InterpolatesFrom`, `InStyleOf`, and `LyricalReferenceTo`.\n\n#### ‚ú® Key Observations:\n\n-   **Diverse Influence Channels**: Sailor Shift‚Äôs inspirations are not confined to a single creative channel. She samples music (`DirectlySamples`), borrows stylistic cues (`InStyleOf`), lifts lyrical fragments (`LyricalReferenceTo`), and interpolates melodies (`InterpolatesFrom`).\n\n-   **Balanced Influencer Types**: Influences come from both **individual artists** and **musical groups**, indicating that her artistry draws from both personal voices and collective aesthetics.\n\n-   **Dense Inbound Edges**: The graph shows multiple inbound links converging on Sailor Shift, underscoring her role as a stylistic inheritor of a tightly connected creative network.\n\n#### üß† Interpretation:\n\nThis direct influence map builds a foundation for understanding her creative identity. However, it only reflects surface-level lineage‚Äîi.e., **those explicitly linked to her** in the graph.\n\n------------------------------------------------------------------------\n\n#### ‚è≠Ô∏è Why We Proceed to Step 4\n\nWhile Step 3 gives us a high-fidelity view of Sailor Shift‚Äôs direct inspirations, it leaves several questions unanswered:\n\n-   **Who are the individuals behind the musical groups?**\n-   **Are there unseen intermediaries‚Äîlike songs or albums‚Äîthat serve as vehicles of influence?**\n-   **What multi-hop chains of inspiration exist beyond what is immediately visible?**\n\nTo answer these, we transition to **Step 4**, where we:\n\n-   Traverse **multi-layer influence chains** (not limited to 1-hop)\n-   Expand **MusicalGroup** nodes into their individual **Person** members (via `MemberOf`)\n-   Visualize **deep indirect relationships** that build Sailor Shift‚Äôs identity over time\n\n------------------------------------------------------------------------\n\n### üìå Step 4: Show All Influence Types in Indirect Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Influence edge types\ninfluence_types <- c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"LyricalReferenceTo\", \"DirectlySamples\")\n\n# Expand full influence paths recursively (e.g. up to 5 hops)\nmax_depth <- 5\ninfluence_paths <- tibble()\ncurrent_targets <- sailor_id\n\nfor (i in 1:max_depth) {\n  next_edges <- edges_tbl %>% filter(`Edge Type` %in% influence_types, target %in% current_targets)\n  if (nrow(next_edges) == 0) break\n  next_edges <- next_edges %>% mutate(depth = paste0(i, \"-hop\"))\n  influence_paths <- bind_rows(influence_paths, next_edges)\n  current_targets <- unique(next_edges$source)\n}\n\n# Identify Musical Groups and expand their members\nmusical_group_ids <- nodes_tbl %>% filter(`Node Type` == \"MusicalGroup\") %>% pull(id)\nmember_edges <- edges_tbl %>% filter(`Edge Type` == \"MemberOf\", target %in% musical_group_ids)\n\n# If any musical group is in influence path, bring in members\ngroup_ids_in_path <- influence_paths %>% filter(source %in% musical_group_ids) %>% pull(source)\nextra_members <- member_edges %>% filter(target %in% group_ids_in_path)\n\n# Combine all edges\nfull_edges <- bind_rows(\n  influence_paths %>% mutate(hop = depth),\n  extra_members %>% mutate(hop = \"GroupMember\")\n)\n\n# Related node ids\nrelated_ids <- unique(c(full_edges$source, full_edges$target, sailor_id))\nvis_nodes <- nodes_tbl %>% filter(id %in% related_ids) %>%\n  mutate(\n    label = name,\n    group = `Node Type`,\n    value = ifelse(name == \"Sailor Shift\", 50, 20),\n    title = paste0(\"<b>\", name, \"</b><br>Type: \", `Node Type`)\n  ) %>%\n  select(id, label, group, value, title)\n\nvis_edges <- full_edges %>%\n  mutate(\n    arrows = \"to\",\n    label = `Edge Type`,\n    color = case_when(\n      `Edge Type` == \"DirectlySamples\" ~ \"#FF6B6B\",\n      `Edge Type` == \"InterpolatesFrom\" ~ \"#4D96FF\",\n      `Edge Type` == \"CoverOf\" ~ \"#FFD93D\",\n      `Edge Type` == \"InStyleOf\" ~ \"#6BCB77\",\n      `Edge Type` == \"LyricalReferenceTo\" ~ \"#C780FA\",\n      `Edge Type` == \"MemberOf\" ~ \"#BDBDBD\",\n      TRUE ~ \"#999999\"\n    )\n  ) %>%\n  select(from = source, to = target, arrows, label, color)\n\nvisNetwork(vis_nodes, vis_edges, width = \"100%\", height = \"800px\") %>%\n  visEdges(smooth = TRUE) %>%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%\n  visLayout(randomSeed = 2025) %>%\n  visLegend(useGroups = TRUE, main = \"Node Type\") %>%\n  visPhysics(stabilization = TRUE)\n```\n:::\n\n\n#### üîç Step 4 Insight: Full Influence Graph with Group Member Expansion\n\nThe interactive graph in Step 4 reveals the **deep influence structure** surrounding Sailor Shift, integrating both direct and indirect artistic relationships and **group-to-individual decompositions**.\n\n#### üéØ Key Observations:\n\n-   **Musical Groups as Gateways**: Many key influences (e.g., *The Phantom Operators*, *Cassette Future*) are MusicalGroups. However, their true impact on Sailor Shift is clarified only after unfolding their members. This highlights the importance of surfacing latent human contributors.\n\n-   **Individuals Behind the Sound**:\n\n    -   *Juno Ray*, *Savannah Teal*, *Zara Quinn*, and others appear as hidden but crucial figures influencing Sailor Shift indirectly through their band affiliations.\n    -   These artists are connected through `MemberOf` ‚Üí `MusicalGroup` ‚Üí `InfluenceType` paths, showing that influence isn't always linear or direct.\n\n-   **Multi-Relation Influence**: Relationships such as `InterpolatesFrom`, `InStyleOf`, and `LyricalReferenceTo` show that Sailor Shift does not just imitate style‚Äîshe blends lyrical and musical fragments from diverse sources.\n\n-   **Dense Centrality**: Sailor Shift sits at the hub of a **diverse, multi-layered network**, receiving creative input from solo artists, collective groups, and intermediary compositions (albums/songs).\n\n#### üß† Interpretation:\n\nThis graph confirms that Sailor Shift is not only influenced by prominent entities but is also indirectly shaped by **dozens of individuals**, whose contributions are embedded within groups. Her artistic identity emerges from a blend of:\n\n-   Stylized group traditions\n-   Personal lyrical echoes\n-   Collaborative musical lineages\n\nIt also suggests that to understand her evolution, one must look beyond direct citations and recognize the **ecosystem of creators** behind the visible front.\n\n------------------------------------------------------------------------\n\n### üìå Step 5: Expand Influence Path ‚Äì Including Songs/Albums (‚â§ 5 Hops)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Influence edge types\ninfluence_types <- c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"LyricalReferenceTo\", \"DirectlySamples\")\n\n# Expand backward paths from Sailor Shift\nmax_depth <- 5\ninfluence_paths <- tibble()\ncurrent_targets <- sailor_id\n\nfor (i in 1:max_depth) {\n  next_edges <- edges_tbl %>% filter(`Edge Type` %in% influence_types, target %in% current_targets)\n  if (nrow(next_edges) == 0) break\n  next_edges <- next_edges %>% mutate(depth = paste0(i, \"-hop\"))\n  influence_paths <- bind_rows(influence_paths, next_edges)\n  current_targets <- unique(next_edges$source)\n}\n\n# Identify Musical Groups and expand their members\nmusical_group_ids <- nodes_tbl %>% filter(`Node Type` == \"MusicalGroup\") %>% pull(id)\nmember_edges <- edges_tbl %>% filter(`Edge Type` == \"MemberOf\", target %in% musical_group_ids)\n\n# If any musical group is in influence path, bring in members\ngroup_ids_in_path <- influence_paths %>% filter(source %in% musical_group_ids) %>% pull(source)\nextra_members <- member_edges %>% filter(target %in% group_ids_in_path)\n\n# Identify all nodes in reachable paths\ndirect_path_ids <- unique(c(influence_paths$source, influence_paths$target))\n\n# Identify intermediaries (song/album) linking between artists and Sailor Shift\nintermediate_edges <- edges_tbl %>%\n  filter(source %in% direct_path_ids | target %in% direct_path_ids) %>%\n  filter(`Edge Type` %in% c(\"PerformerOf\", \"AppearsOn\")) %>%\n  mutate(hop = \"Song/Album Link\")\n\n# Combine all edges\nfull_edges <- bind_rows(\n  influence_paths %>% mutate(hop = depth),\n  intermediate_edges,\n  extra_members %>% mutate(hop = \"GroupMember\")\n)\n\n# Related node ids\nrelated_ids <- unique(c(full_edges$source, full_edges$target, sailor_id))\nvis_nodes <- nodes_tbl %>% filter(id %in% related_ids) %>%\n  mutate(\n    label = name,\n    group = `Node Type`,\n    value = ifelse(name == \"Sailor Shift\", 50, 20),\n    font = list(size = ifelse(name == \"Sailor Shift\", 36, 22)),\n    title = paste0(\"<b>\", name, \"</b><br>Type: \", `Node Type`)\n  ) %>%\n  select(id, label, group, value, font, title)\n\nvis_edges <- full_edges %>%\n  mutate(\n    arrows = \"to\",\n    label = `Edge Type`,\n    color = case_when(\n      `Edge Type` == \"DirectlySamples\" ~ \"#FF6B6B\",\n      `Edge Type` == \"InterpolatesFrom\" ~ \"#4D96FF\",\n      `Edge Type` == \"CoverOf\" ~ \"#FFD93D\",\n      `Edge Type` == \"InStyleOf\" ~ \"#6BCB77\",\n      `Edge Type` == \"LyricalReferenceTo\" ~ \"#C780FA\",\n      `Edge Type` == \"MemberOf\" ~ \"#BDBDBD\",\n      `Edge Type` == \"PerformerOf\" ~ \"#00BFC4\",\n      `Edge Type` == \"AppearsOn\" ~ \"#F8766D\",\n      TRUE ~ \"#999999\"\n    )\n  ) %>%\n  select(from = source, to = target, arrows, label, color)\n\nvisNetwork(vis_nodes, vis_edges, width = \"100%\", height = \"800px\") %>%\n  visEdges(smooth = TRUE) %>%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%\n  visLayout(randomSeed = 2025) %>%\n  visLegend(useGroups = TRUE, main = \"Node Type\") %>%\n  visPhysics(stabilization = TRUE)\n```\n:::\n\n\n\n#### üîç Insight (Step 5 ‚Äì Song/Album Influence)\nThe network reveals a rich multi-hop influence chain leading into Sailor Shift's artistry. Instead of just direct artistic references, this graph uncovers how individuals or groups shaped her through intermediary songs and albums.\n\n#### üéØ Key Observations:\n\nSeveral musical groups contributed via performed songs, which were later interpolated or sampled by Sailor Shift.\n\nAlbums served as indirect influence bridges, housing songs that were referenced, covered, or remixed.\n\nCollaboration depth is highlighted‚Äîsome artists influence Sailor Shift through layered paths (e.g., PerformerOf ‚Üí Song ‚Üí InterpolatesFrom ‚Üí Sailor Shift).\n\nThis illustrates how artistic influence flows across works, not just individuals‚Äîshowing Sailor Shift‚Äôs stylistic lineage as both deep and distributed.\n\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}