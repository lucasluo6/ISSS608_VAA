---
title: "Hands-on_Ex06"
author: "Lucas Luo"
date: "May 21 2025"
date-modified: "last-modified"

format:
  html:
    code-tools: true          
    code-fold: true          
    toc: true
    theme: lux

execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
---

# **Visualising and Analysing Time-oriented Data**

# **1 Introduction & Data Preparation**

## **1.1 Loading packages**

```{r}
pacman::p_load(scales,
               viridis,
               lubridate,
               ggthemes,
               gridExtra,
               readxl,
               knitr,
               data.table,
               tidyverse,
               CGPfunctions,  #for slopegraph
               ggHoriPlot
               )
```

## **1.2 Data Preparation**

### **1.2.1 Attack dataset**

```{r}
attacks <- read_csv("data/eventlog.csv")
kable(head(attacks))
```

There are three columns, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.

-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.

-   *tz* field stores time zone of the source IP address.

Step 1: Deriving *weekday* and *hour of day* fields

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

Step 2: Deriving the attacks tibble data frame

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks_new <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))

kable(head(attacks_new))
```

### **1.2.2 Air arrivals dataset**

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
kable(head(air))
```

Creating MM YY columns

```{r}
air$month <- factor(month(air$`Month-Year`),
                    levels=1:12,
                    labels=month.abb,
                    ordered=TRUE)
air$year <- year(ymd(air$`Month-Year`))
kable(head(air))
```

### **1.2.3 Rice dataset**

```{r}
rice <- read_csv("data/rice.csv")
kable(head(rice))
```

### **1.2.4 Retail price dataset**

```{r}
averp <- read_csv("data/AVERP.csv") %>%
  mutate(`Date` = dmy(`Date`))
kable(head(averp))
```

# **2 Visualizations**

## **2.1 Calendar Heatmap**

### **2.1.1 Single Calendar Heatmap**

::: panel-tabset
### Without theme_tufte()

```{R}
grouped <- attacks_new %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(data = grouped,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

### With theme_tufte()

```{R}
grouped <- attacks_new %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(data = grouped,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```
:::

### **2.1.2 Multiple Calendar Heatmaps**

```{r}
attacks_by_country <- attacks_new %>%
  count(source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))

top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks_new %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(source_country, levels = top4)) %>%
  na.omit()

kable(head(top4_attacks))
```

```{r}
ggplot(data = top4_attacks,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  facet_wrap(~source_country, ncol = 2) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

## **2.2 Cycle Plot**

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)

hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))

ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")+
  theme(
    strip.background = element_blank(),
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

## **2.3 Slopegraph**

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                  Title = "Rice Yield of Top 11 Asian Countries",
                  SubTitle = "1961 - 1980",
                  Caption = "Modified")
```

## **2.4 Horizon Graph**

```{r}
averp %>%
  filter(Date >= "2018-01-01") %>%
  ggplot() + 
  geom_horizon(aes(x = Date, y=Values), 
               origin = "midpoint", 
               horizonscale = 6)+
  facet_grid(`Consumer Items`~.) +
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
  ggtitle("Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 20222)")
```
