---
title: "Hands-on Ex02"
author: "Lucas Luo"
---

# **2  Beyond ggplot2 Fundamentals**

## **2.1 Overview**

In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:

-   control the placement of annotation on a graph by using functions provided in ggrepel package,

-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   plot composite figure by combining ggplot2 graphs by using patchwork package.

## **2.2 Getting started**

### **2.2.1 Installing and loading the required libraries**

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

### **2.2.2 Importing data**

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

The categorical attributes are: ID, CLASS, GENDER and RACE. The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## 2.3 Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
### The plot

```{r plot-ggrepel01, echo=FALSE}
ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) + geom_point() + geom_smooth(method = "lm", size = 0.5) + geom_label_repel(aes(label = ID), size = 2.5) + coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + ggtitle("English scores versus Maths scores for Primary 3") 
```

### The code
```{r, eval=FALSE}
ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) + geom_point() + geom_smooth(method = "lm", size = 0.5) + geom_label_repel(aes(label = ID), size = 2.5) + coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + ggtitle("English scores versus Maths scores for Primary 3")
```
:::

### **2.3.1 Working with ggrepel**

::: panel-tabset
### The plot

```{r plot-ggrepel02, echo=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

### The code
```{r, eval=FALSE}
ggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) + geom_point() + geom_smooth(method=lm, size=0.5) +\
geom_label_repel(aes(label = ID), fontface = "bold") + coord_cartesian(xlim=c(0,100), ylim=c(0,100)) + ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## **2.4 Beyond ggplot2 Themes**

::: panel-tabset
### The plot

```{r plot-ggrepel03, echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

### The code
```{r, eval=FALSE}
ggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + theme_gray() + ggtitle("Distribution of Maths scores")
```
:::

### **2.4.1 Working with ggtheme package**

::: panel-tabset
### The plot

```{r plot-ggrepel04, echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

### The code
```{r, eval=FALSE}
ggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + ggtitle("Distribution of Maths scores") + theme_economist()
```
:::

### **2.4.2 Working with hrbthems package**

::: panel-tabset
### The plot

```{r plot-ggrepel05, echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
### The code
```{r, eval=FALSE}
ggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + ggtitle("Distribution of Maths scores") + theme_ipsum()
```
:::

::: panel-tabset
### The plot

```{r plot-ggrepel06, echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

### The code
```{r, eval=FALSE}
ggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + ggtitle("Distribution of Maths scores") + theme_ipsum(axis_title_size = 18, base_size = 15, grid = "Y")
```
:::

## **2.5 Beyond Single Graph**

::: panel-tabset
### The plot

```{r plot-ggrepel07, echo=FALSE}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

### The code
```{r, eval=FALSE}
p1 <- ggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + coord_cartesian(xlim=c(0,100)) + ggtitle("Distribution of Maths scores")
```
:::

Next 
::: panel-tabset 
### The plot
```{r plot-ggrepel09, echo=FALSE}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
```
### The code
```{r, eval=FALSE}
p2 \<- ggplot(data=exam_data, aes(x = ENGLISH)) + geom_histogram(bins=20, boundary = 100, color="grey25", fill="grey90") + coord_cartesian(xlim=c(0,100)) + ggtitle("Distribution of English scores")
```
:::

::: panel-tabset
### The plot
```{r plot-ggrepel10, echo=FALSE}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
### The code
```{r, eval=FALSE}
p3 <- ggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) + geom_point() + geom_smooth(method=lm, size=0.5) +
coord_cartesian(xlim=c(0,100), ylim=c(0,100)) + ggtitle("English scores versus Maths scores for Primary 3")
```
:::

### **2.5.1 Creating Composite Graphics: pathwork methods**

There are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign `/`

### **2.5.2 Combining two ggplot2 graphs**

::: panel-tabset
### The plot

```{r plot-ggrepel11, echo=FALSE}
p1 + p2
```

### The code
```{r, eval=FALSE}
p1 + p2
```
:::

### **2.5.3 Combining three ggplot2 graphs**

::: panel-tabset
### The plot

```{r plot-ggrepel12, echo=FALSE}
(p1 / p2) | p3
```

### The code
```{r, eval=FALSE}
(p1 / p2) \| p3
```
:::

### **2.5.4 Creating a composite figure with tag**

::: panel-tabset
### The plot

```{r plot-ggrepel13, echo=FALSE}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

### The code
```{r, eval=FALSE}
((p1 / p2) \| p3) + plot_annotation(tag_levels = 'I')
```
:::

### **2.5.5 Creating figure with insert**

::: panel-tabset
### The plot

```{r plot-ggrepel14, echo=FALSE}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

### The code
```{r, eval=FALSE}
p3 + inset_element(p2, left = 0.02, bottom = 0.7, right = 0.5, top = 1)
```
:::

### **2.5.6 Creating a composite figure by using patchwork and ggtheme**

::: panel-tabset
### The plot

```{r plot-ggrepel15, echo=FALSE}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

### The code
```{r, eval=FALSE}
patchwork \<- (p1 / p2) \| p3 patchwork & theme_economist()
```
:::
